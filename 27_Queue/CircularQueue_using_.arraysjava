package Queue;


public class Q1_Queue_using_arrays {

    public static class Queue{  //WE DONT USE this implementation since we get O(n) in REMOVE OPERATIOn of array. 
        static int arr[];
        static int size;
        static int rear;
        static int front;  //we use circular queue to make remove operation O(1)

        Queue(int n){
            arr = new int[n];
            size = n;
            rear = -1;
            front = -1;
        }

        public static boolean isEmpty(){
            return rear == -1 && front == -1;
        }

        public static boolean isFull(){
            return (rear+1) % size == front;
        }

        //add
        public static void add(int data){  //O(1)
            if(isFull()){
                System.out.println("queue is full");
                return;
            }
            //add 1st element
            if(front == -1){
                front = 0;
            }
            rear = (rear + 1) % size;
            arr[rear] = data;
        }

        //remove
        public static int remove(){  //O(n)
            if(isEmpty()){
                System.out.println("empty queue");
                return -1;
            }

            int result = arr[front];    //arr[front] ki value ko store kia in result
            // last element delete
            if(rear == front){
                rear = front = -1;
            }else{
                front = (front+1) % size;
            }
            
            return result;             //wahi store value ko return kia
        }

        public static int peek(){    //O(1)
            if(isEmpty()){
                System.out.println("empty queue");
                return -1;
            }
            return arr[front];
        }
    }
    public static void main(String[] args) {
        Queue q = new Queue(5);

        q.add(1);
        q.add(2);
        q.add(3);
        //1 2 3
        System.out.println(q.remove());
        q.add(4);
        System.out.println(q.remove());
        q.add(5);
        while(!q.isEmpty()){
            System.out.println(q.peek());
            q.remove();
        }
        
    }
    
}
